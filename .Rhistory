for (i in seq(50,1000,50)){
TnVec = vector()
for (j in 1:i){
x = rexp(i,1/5)
TnVec[j] = 1/mean(x)
}
varTvec[i] = var(TnVec)
plotvec[i] = i
print(i)
}
incr <- seq(50,1000,50)
incr
varTvec = plotvec = vector()
incr <- seq(50,1000,50)
for (i in 1:length(incr)){
TnVec = vector()
for (j in 1:incr[i]){
x = rexp(incr[i],1/5)
TnVec[j] = 1/mean(x)
}
varTvec[i] = var(TnVec)
plotvec[i] = incr[i]
}
plotvec
varTvec
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
plot(plotvec,Ratiovec,type="l")
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
seq(50,10000,50)
mclapply
simulation <- function(incr){
TnVec = vector()
for (j in 1:incr[i]){
x = rexp(incr[i],1/5)
TnVec[j] = 1/mean(x)
}
varTvec[i] = var(TnVec)
plotvec[i] = incr[i]
return(list(varTvec=varTvec, plotvec=plotvec))
}
incr <- seq(50,1000,50)
simulation <- function(incr){
TnVec = vector()
for (j in 1:incr[i]){
x = rexp(incr[i],1/5)
TnVec[j] = 1/mean(x)
}
varTvec[i] = var(TnVec)
plotvec[i] = incr[i]
return(list(varTvec=varTvec, plotvec=plotvec))
}
simulation(10)
simulation(incr)
simulation <- function(incr,i){
TnVec = vector()
for (j in 1:incr[i]){
x = rexp(incr[i],1/5)
TnVec[j] = 1/mean(x)
}
varTvec[i] = var(TnVec)
plotvec[i] = incr[i]
return(list(varTvec=varTvec, plotvec=plotvec))
}
simulation(incr,2)
rm(list=ls())
varTvec = plotvec = vector()
incr <- seq(50,1000,50)
incr <- seq(50,10000,50)
simulation <- function(incr,i){
TnVec = vector()
for (j in 1:incr[i]){
x = rexp(incr[i],1/5)
TnVec[j] = 1/mean(x)
}
varTvec[i] = var(TnVec)
plotvec[i] = incr[i]
return(list(varTvec=varTvec, plotvec=plotvec))
}
simulation(incr,2)
simulation <- function(sim_i){
TnVec = vector()
for (j in 1:sim_i){
x = rexp(i,1/5)
TnVec[j] = 1/mean(x)
}
varTvec = var(TnVec)
plotvec = sim_i
return(list(varTvec=varTvec, plotvec=plotvec))
}
simulation(2)
simulation(1)
simulation <- function(sim_i){
TnVec = vector()
for (j in 1:sim_i){
x = rexp(sim_i,1/5)
TnVec[j] = 1/mean(x)
}
varTvec = var(TnVec)
plotvec = sim_i
return(list(varTvec=varTvec, plotvec=plotvec))
}
simulation <- function(n){
TnVec = vector()
for (j in 1:n){
x = rexp(n,1/5)
TnVec[j] = 1/mean(x)
}
varTvec = var(TnVec)
plotvec = n
return(list(varTvec=varTvec, plotvec=plotvec))
}
simulation(1)
simulation(2)
simulation(10)
simulation(1000)
lapply(incr, function(n,theta) simulation, theta=5)
lapply(incr, function(n,theta=5) return(simulation(n=incr,theta)))
simulation <- function(n,theta){
TnVec = vector()
for (j in 1:n){
x = rexp(n,1/5)
TnVec[j] = 1/mean(x)
}
CRLB = 1/(n*theta^2)
varTvec = var(TnVec)
plotvec = n
return(list(varTvec=varTvec, plotvec=plotvec, CRLB=CRLB))
}
lapply(incr, function(n,theta=5) return(simulation(n=incr,theta)))
warnings()
incr <- seq(50,1000,50)
lapply(incr, function(n,theta=5) return(simulation(n=incr,theta)))
warnings()
seq(50,1000,50)
incr <- seq(50,100,50)
incr
lapply(incr, function(n,theta=5) return(simulation(n=incr,theta)))
simulation <- function(n,theta){
TnVec = vector()
for (j in 1:n){
x = rexp(n,1/5)
TnVec[j] = 1/mean(x)
}
CRLB = 1/(n*theta^2)
varTvec = var(TnVec)
return(list(varTvec=varTvec, plotvec=n, CRLB=CRLB))
}
incr <- seq(50,100,50)
lapply(incr, function(n,theta=5) return(simulation(n=incr,theta)))
simulation <- function(n,theta){
TnVec = vector()
for (j in 1:n){
x = rexp(n,1/5)
TnVec[j] = 1/mean(x)
}
CRLB = 1/(n*theta^2)
varTvec = var(TnVec)
return(list(varTvec=varTvec, plotvec=n, CRLB=CRLB))
}
simulation <- function(n,theta){
TnVec = vector()
for (j in 1:n){
x = rexp(n,1/5)
TnVec[j] = 1/mean(x)
}
CRLB = 1/(n*theta^2)
varTvec = var(TnVec)
return(list(varTvec=varTvec, n=n, CRLB=CRLB))
}
incr <- seq(50,100,50)
lapply(incr, function(n,theta=5) return(simulation(n=incr,theta)))
lapply(i = 1:length(incr), function(n,theta) return(simulation(n=incr[i],theta=5)))
incr <- seq(50,100,50)
lapply(i = 1:length(incr), function(n,theta) return(simulation(n=incr[i],theta=5)))
lapply(i = 1:length(incr), FUN = function(n,theta) return(simulation(n=incr[i],theta=5)))
lapply(i = 1:length(incr), FUN = function(n=incr[i],theta=5) return(simulation(n,theta)))
lapply(i = 1:length(incr), function(n=incr[i],theta=5) return(simulation(n,theta)))
lapply(1:length(incr), function(n=incr[i],theta=5) return(simulation(n,theta)))
1:length(incr)
i=1
lapply(1:length(incr), function(n=incr[i],theta=5) return(simulation(n,theta)))
incr[i]
1/(n*theta^2)
rm(list=ls())
lapply(1:length(incr), function(n=incr[i],theta=5) return(simulation(n,theta)))
length(incr)
simulation <- function(n,theta){
TnVec = vector()
for (j in 1:n){
x = rexp(n,1/5)
TnVec[j] = 1/mean(x)
}
CRLB = 1/(n*theta^2)
varTvec = var(TnVec)
return(list(varTvec=varTvec, n=n, CRLB=CRLB))
}
incr <- seq(50,100,50)
lapply(1:length(incr), function(n=incr[i],theta=5) return(simulation(n,theta)))
incr[i]
incr <- seq(50,100,50)
i=1:length(incr)
incr[i]
lapply(1:length(incr), function(n=incr[x],theta=5) return(simulation(n,theta)))
lapply(c(1:length(incr)), function(n=incr[i],theta=5) return(simulation(n,theta)))
lapply(i= c(1:length(incr)), function(n=incr[i],theta=5) return(simulation(n,theta)))
lapply(c(1:length(incr)), function(n=incr[i],theta=5) return(simulation(n,theta)))
lapply(c(1:length(incr)), function(n=incr[i],theta=5) return(simulation(n,theta)))
incr[i]
i
i
i=2
i
lapply(c(1:length(incr)), function(n=incr[i],theta=5) return(simulation(n,theta)))
lapply(c(1:length(incr)), function(n=i[incr],theta=5) return(simulation(n,theta)))
lapply(c(1:length(incr)), function(n=i,theta=5) return(simulation(n,theta)))
lapply(incr, function(n=i,theta=5) return(simulation(n,theta)))
incr <- seq(50,1000,50)
lapply(incr, function(n=i,theta=5) return(simulation(n,theta)))
lapply(incr, function(n=incr,theta=5) return(simulation(n,theta)))
unlist(lapply(incr, function(n=incr,theta=5) return(simulation(n,theta))))
a <- unlist(lapply(incr, function(n=incr,theta=5) return(simulation(n,theta))))
a
class(a)
as.data.frame(a)
a <- lapply(incr, function(n=incr,theta=5) return(simulation(n,theta)))
a[[2]]
as.array(a)
as.array(unlist(a))
as.matrix(unlist(a))
as.matrix(unlist(a),ncol=3)
a <- sapply(incr, function(n=incr,theta=5) return(simulation(n,theta)))
a
class(a)
as.data.frame(a)
t(a)
a <- t(sapply(incr, function(n=incr,theta=5) return(simulation(n,theta))))
a
a$varTvec
a <- t(sapply(incr, function(n=incr,theta=5) return(simulation(n,theta))))
a$varTvec
names(a)
a[1,]
a$n
a <- as.data.frame(t(sapply(incr, function(n=incr,theta=5) return(simulation(n,theta)))))
a$varTvec
a
a <- as.data.frame(unlist(t(sapply(incr, function(n=incr,theta=5) return(simulation(n,theta))))))
a
a <- as.data.frame(t(sapply(incr, function(n=incr,theta=5) return(simulation(n,theta)))))
a
a <- as.data.frame(t(sapply(incr, function(n=incr,theta=5) return(simulation(n,theta)))))
a
a <- data.frame(t(sapply(incr, function(n=incr,theta=5) return(simulation(n,theta)))))
a
a$varTvec
a[,1]
class(a)
?data.frame
a <- data.frame(t(sapply(incr, function(n=incr,theta=5) return(simulation(n,theta)))),stringsAsFactors=TRUE)
a <- data.frame(t(sapply(incr, function(n=incr,theta=5) return(simulation(n,theta)))),stringsAsFactors=FALSE)
a[,1]
a <- lapply(incr, function(n=incr,theta=5) return(simulation(n,theta))
)
a <- lapply(incr, function(n=incr,theta=5) return(simulation(n,theta)))
a
a
a[[2]]
dim(a)
length(a)
a[[20]]
ret_dat <- data.frame()
?array
ret_dat <- array(dim=c(3,length(a)))
ret_dat
ret_dat <- array(dim=c(length(a),3))
ret_dat
ret_dat <- array(dim=c(length(a),3),dimnames=c("varTvec","CRLB","n"))
source('~/.active-rstudio-document', echo=TRUE)
ret_dat <- array(dim=c(length(a),3),dimnames=list("varTvec","CRLB","n"))
ret_dat <- array(dim=c(length(a),3),dimnames=list("varTvec","CRLB"))
dimnames(ret_dat)
dimnames(ret_dat)[,2]
dimnames(ret_dat)[,2]=list("varTvec","CRLB","n")
dim(ret_dat)
dimnames(ret_dat)[1,]=list("varTvec","CRLB","n")
dimnames(ret_dat)[1]=list("varTvec","CRLB","n")
dimnames(ret_dat)[2]=list("varTvec","CRLB","n")
dimnames(ret_dat)=list(c("varTvec","CRLB","n"),NULL)
dimnames(ret_dat)=list(NULL,c("varTvec","CRLB","n"))
ret_dat
ret_dat <- array(dim=c(length(a),3), dimnames=list(NULL,c("varTvec","CRLB","n")))
ret_dat[1,]
i=1
a[[i]]
unlista[[i]]
unlist(a[[i]])
a[[i]] = unlist(a[[i]])
a[[i]]
ret_dat[i,] = unlist(a[[i]])
ret_dat
_unlist_ =function(x){
ret_dat <- array(dim=c(length(a),3), dimnames=list(NULL,c("varTvec","CRLB","n")))
names(ret_dat)
for(i in 1:length(a)){
ret_dat[i,] = unlist(a[[i]])
}
}
return(ret_dat)
_unlist_ =function(x){
ret_dat <- array(dim=c(length(a),3), dimnames=list(NULL,c("varTvec","CRLB","n")))
names(ret_dat)
for(i in 1:length(a)){
ret_dat[i,] = unlist(a[[i]])
}
return(ret_dat)
}
.unlist =function(x){
ret_dat <- array(dim=c(length(a),3), dimnames=list(NULL,c("varTvec","CRLB","n")))
names(ret_dat)
for(i in 1:length(a)){
ret_dat[i,] = unlist(a[[i]])
}
return(ret_dat)
}
.unlist(a)
results <- .unlist(a)
matplot(results)
matplot(results,2)
matplot
?matplot
matplot(t(results),2)
matplot(t(results))
matplot(results)
matplot(results,type="l")
results <- .unlist(a)
plot(results[,1],type="l")
results
.unlist =function(x){
ret_dat <- array(dim=c(length(a),3), dimnames=list(NULL,c("varTvec","CRLB","n")))
names(ret_dat)
for(i in 1:length(a)){
ret_dat[i,] = unlist(a[[i]])
}
return(as.data.frame(ret_dat))
}
results <- .unlist(a)
plot(results[,1],type="l")
plot(results$varTvec,type="l")
plot(results$varTvec,type="l")
lines(results$CRLB,col=2)
abline(h=0)
results$CRLB
results$n
.unlist =function(x){
ret_dat <- array(dim=c(length(a),3), dimnames=list(NULL,c("varTvec","n","CRLB")))
names(ret_dat)
for(i in 1:length(a)){
ret_dat[i,] = unlist(a[[i]])
}
return(as.data.frame(ret_dat))
}
results <- .unlist(a)
plot(results$varTvec,type="l")
lines(results$CRLB,col=2)
abline(h=0)
incr <- seq(50,10000,50)
a <- lapply(incr, function(n=incr,theta=5) return(simulation(n,theta)))
getwd()
setwd("C:/Users/U04992212/Desktop/test2")
Reduce
?Reduce
reduce()
purrr::reduce()
purrr::reduce
?purrr::reduce
numbers <- c(16, 25, 36, 49, 64, 81)
sqrt_newton(numbers, init = rep(1, 6), eps = rep(0.001, 6))
sqrt_newton_recur <- function(a, init, eps = 0.01){
if(abs(init**2 - a) < eps){
result <- init
} else {
init <- 1/2 * (init + a/init)
result <- sqrt_newton_recur(a, init, eps)
}
return(result)
}
numbers <- c(16, 25, 36, 49, 64, 81)
sqrt_newton(numbers, init = rep(1, 6), eps = rep(0.001, 6))
sqrt_newton <- function(a, init, eps = 0.01){
while(abs(init**2 - a) > eps){
init <- 1/2 *(init + a/init)
}
return(init)
}
numbers <- c(16, 25, 36, 49, 64, 81)
sqrt_newton(numbers, init = rep(1, 6), eps = rep(0.001, 6))
Reduce("+", numbers)
Reduce("+", numbers, init= 0)
qr
lm(dist~speed,data=cars)$coefficients
(Intercept)       speed
-17.579095    3.932409
y=cars$dist
X=cbind(1,cars$speed)
solve(crossprod(X,X))%*%crossprod(X,y)
y
X
qr(as.matrix(X))
qr.R(qr(as.matrix(X)))
solve(qr.R(qr(as.matrix(X))))
`R^-1` <- solve(qr.R(qr(as.matrix(X))))
`Q^T`
`Q^T` <-  t(qr.Q(qr(as.matrix(X))))
`R^-1` %*% `Q^T` %*% y
y
length(y)
`R^-1`
Xlist = list()
for(j in 1:m) Xlist[[j]] = X[(j-1)*10+1:10,]
ylist = list()
for(j in 1:m) ylist[[j]] = y[(j-1)*10+1:10]
m <- 5
Xlist = list()
for(j in 1:m) Xlist[[j]] = X[(j-1)*10+1:10,]
ylist = list()
for(j in 1:m) ylist[[j]] = y[(j-1)*10+1:10]
Xlist
ylist
QR1 = list()
for(j in 1:m) QR1[[j]] = list(Q=qr.Q(qr(as.matrix(Xlist[[j]]))),R=qr.R(qr(as.matrix(Xlist[[j]]))))
QR1
y
`Q^T`
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
Xlist
QR1 = list()
for(j in 1:m) QR1[[j]] = list(Q=qr.Q(qr(as.matrix(Xlist[[j]]))),R=qr.R(qr(as.matrix(Xlist[[j]]))))
QR1
QR1[[1]]
R1 = QR1[[1]]$R
R1
for(j in 2:m) R1 = rbind(R1,QR1[[j]]$R)
R1
R1
Q1 = qr.Q(qr(as.matrix(R1)))
Q1
Q1 = qr.Q(qr(as.matrix(R1)))
R2 = qr.R(qr(as.matrix(R1)))
Q2list=list()
for(j in 1:m) Q2list[[j]] = Q1[(j-1)*2+1:2,]
Q2list
for(j in 1:m) Q2list[[j]] = Q2[(j-1)*2+1:2,]
source('~/.active-rstudio-document', echo=TRUE)
3 ^(-4)
Xlist
QR1
Q2list
Q2list=list()
for(j in 1:m) Q2list[[j]] = Q1[(j-1)*2+1:2,]
Q2list
Q2 = qr.Q(qr(as.matrix(R1)))
R2 = qr.R(qr(as.matrix(R1)))
Q2list=list()
for(j in 1:m) Q2list[[j]] = Q2[(j-1)*2+1:2,]
Q2list
Q3list
R2
solve(R2)
nrow(X)
nrow(X)/5
QR1
chunk = function(x,n) split(x, cut(seq_along(x), n, labels = FALSE))
chunk
a_parcourir = chunk(seq_len(nrow(X)), ncl)
y = cars$dist
X = data.frame(1,cars$speed)
k = ncol(X)
library(parallel)
library(pbapply)
ncl = detectCores()-1
cl = makeCluster(ncl)
install.packages("pbapply")
library(parallel)
library(pbapply)
ncl = detectCores()-1
cl = makeCluster(ncl)
chunk = function(x,n) split(x, cut(seq_along(x), n, labels = FALSE))
a_parcourir = chunk(seq_len(nrow(X)), ncl)
for(i in 1:length(a_parcourir)) a_parcourir[[i]] = rep(i, length(a_parcourir[[i]]))
Xlist = split(X, unlist(a_parcourir))
ylist = split(y, unlist(a_parcourir))
Xlist
ncl
50/3
chunk(seq_len(nrow(matrix(NA,ncol=2,nrow=5))), ncl)
chunk(seq_len(nrow(matrix(NA,ncol=2,nrow=10))), ncl)
Xlist[[1]]
dim(Xlist[[1]])
dim(Xlist[[2]])
dim(Xlist[[3]])
compute_qr = function(x){
list(Q=qr.Q(qr(as.matrix(x))),R=qr.R(qr(as.matrix(x))))
}
get_Vlist = function(j){
Q3 = QR1[[j]]$Q %*% Q2list[[j]]
t(Q3) %*% ylist[[j]]
}
QR1
